// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetMtaOperationParams creates a new GetMtaOperationParams object
// with the default values initialized.
func NewGetMtaOperationParams() *GetMtaOperationParams {
	var ()
	return &GetMtaOperationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetMtaOperationParamsWithTimeout creates a new GetMtaOperationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetMtaOperationParamsWithTimeout(timeout time.Duration) *GetMtaOperationParams {
	var ()
	return &GetMtaOperationParams{

		timeout: timeout,
	}
}

// NewGetMtaOperationParamsWithContext creates a new GetMtaOperationParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetMtaOperationParamsWithContext(ctx context.Context) *GetMtaOperationParams {
	var ()
	return &GetMtaOperationParams{

		Context: ctx,
	}
}

// NewGetMtaOperationParamsWithHTTPClient creates a new GetMtaOperationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetMtaOperationParamsWithHTTPClient(client *http.Client) *GetMtaOperationParams {
	var ()
	return &GetMtaOperationParams{
		HTTPClient: client,
	}
}

/*GetMtaOperationParams contains all the parameters to send to the API endpoint
for the get mta operation operation typically these are written to a http.Request
*/
type GetMtaOperationParams struct {

	/*Embed
	  Adds the specified property in the response body


	*/
	Embed *string
	/*OperationID*/
	OperationID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get mta operation params
func (o *GetMtaOperationParams) WithTimeout(timeout time.Duration) *GetMtaOperationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get mta operation params
func (o *GetMtaOperationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get mta operation params
func (o *GetMtaOperationParams) WithContext(ctx context.Context) *GetMtaOperationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get mta operation params
func (o *GetMtaOperationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get mta operation params
func (o *GetMtaOperationParams) WithHTTPClient(client *http.Client) *GetMtaOperationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get mta operation params
func (o *GetMtaOperationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmbed adds the embed to the get mta operation params
func (o *GetMtaOperationParams) WithEmbed(embed *string) *GetMtaOperationParams {
	o.SetEmbed(embed)
	return o
}

// SetEmbed adds the embed to the get mta operation params
func (o *GetMtaOperationParams) SetEmbed(embed *string) {
	o.Embed = embed
}

// WithOperationID adds the operationID to the get mta operation params
func (o *GetMtaOperationParams) WithOperationID(operationID string) *GetMtaOperationParams {
	o.SetOperationID(operationID)
	return o
}

// SetOperationID adds the operationId to the get mta operation params
func (o *GetMtaOperationParams) SetOperationID(operationID string) {
	o.OperationID = operationID
}

// WriteToRequest writes these params to a swagger request
func (o *GetMtaOperationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Embed != nil {

		// query param embed
		var qrEmbed string
		if o.Embed != nil {
			qrEmbed = *o.Embed
		}
		qEmbed := qrEmbed
		if qEmbed != "" {
			if err := r.SetQueryParam("embed", qEmbed); err != nil {
				return err
			}
		}

	}

	// path param operationId
	if err := r.SetPathParam("operationId", o.OperationID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
