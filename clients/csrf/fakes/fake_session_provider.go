// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/SAP/cf-mta-plugin/clients/csrf"
)

type FakeSessionProvider struct {
	GetSessionStub        func() error
	getSessionMutex       sync.RWMutex
	getSessionArgsForCall []struct{}
	getSessionReturns     struct {
		result1 error
	}
	getSessionReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake FakeSessionProvider) GetSession() error {
	fake.getSessionMutex.Lock()
	ret, specificReturn := fake.getSessionReturnsOnCall[len(fake.getSessionArgsForCall)]
	fake.getSessionArgsForCall = append(fake.getSessionArgsForCall, struct{}{})
	fake.recordInvocation("GetSession", []interface{}{})
	fake.getSessionMutex.Unlock()
	if fake.GetSessionStub != nil {
		return fake.GetSessionStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getSessionReturns.result1
}

func (fake *FakeSessionProvider) GetSessionCallCount() int {
	fake.getSessionMutex.RLock()
	defer fake.getSessionMutex.RUnlock()
	return len(fake.getSessionArgsForCall)
}

func (fake *FakeSessionProvider) GetSessionReturns(result1 error) {
	fake.GetSessionStub = nil
	fake.getSessionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSessionProvider) GetSessionReturnsOnCall(i int, result1 error) {
	fake.GetSessionStub = nil
	if fake.getSessionReturnsOnCall == nil {
		fake.getSessionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getSessionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSessionProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getSessionMutex.RLock()
	defer fake.getSessionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSessionProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ csrf.SessionProvider = new(FakeSessionProvider)
